# app/data_models.py

from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime

class ResourceModel(BaseModel):
    id: str = Field(description="Unique immutable resource ID")
    file_name: str
    storage_path: str
    size_bytes: int = Field(default=0, description="Size in bytes")
    uploaded_at: datetime = Field(default_factory=datetime.now)
    mime_type: Optional[str] = None

    model_config = {
        "from_attributes": True,
    }

class QueryRequest(BaseModel):
    """The input model for the RAG query endpoint."""
    query: str = Field(..., description="The user's question to be answered by the RAG system.")
    k: int = Field(5, description="The number of documents (chunks) to retrieve from the vector store.", ge=1, le=20)
    
class ContextDocument(BaseModel):
    """Represents a retrieved document chunk used as context."""
    page_content: str = Field(..., description="The content of the document chunk.")
    source: str = Field(..., description="The source file from which the chunk was extracted.")
    score: Optional[float] = Field(None, description="Similarity score (if applicable).")

class RAGResponse(BaseModel):
    """The output model for the RAG query endpoint."""
    answer: str = Field(..., description="The final answer generated by the LLM.")
    context: List[ContextDocument] = Field(..., description="The list of documents used as context for the answer.")
    model_name: str = Field(..., description="The name of the LLM used for generation.")
    response_time_seconds: float = Field(..., description="Time taken by the LLM to generate the answer.")
    tokens_estimated: int = Field(..., description="Estimated token count for the prompt.")
    error: Optional[str] = Field(None, description="Error message, if generation failed.")